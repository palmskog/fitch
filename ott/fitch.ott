embed
{{ coq
Require Export Structures.OrderedTypeEx.
Require Export FMapInterface.
Require Export Fitch.dyadic_ordered.
Import ListNotations.
Module Fitch (UOT : UsualOrderedType) (DUOT : DyadicUsualOrderedType UOT)
 (Map : FMapInterface.S with Module E := DUOT).
Section FitchProp.
Context {A : Type}.
}}
metavar p ::=
      {{ lex alphanum }}
      {{ coq A }}
      {{ coq-universe Type }}
      {{ hol bool }}
      {{ com atomic proposition }}
metavar l ::=
      {{ lex numeral }}
      {{ coq UOT.t }}
      {{ coq-universe Type }}
      {{ hol num }}
      {{ com proof entry label }}
indexvar n ::= 
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ hol num }}
      {{ com index variable (subscript) }}
grammar
claim :: claim_ ::=
      {{ coq-universe Type }}
      {{ com claim }}
      | judgment proof :: :: judgment_proof

judgment :: judgment_ ::=
	 {{ coq-universe Type }}
	 {{ com judgment }}
	 | proplist |- prop :: :: follows

prop {{ tex \phi }} :: prop_ ::=
     {{ coq-universe Type }}
     {{ com proposition }}
     | p :: :: p
       {{ com atomic }}
     | ~ prop :: :: neg
       {{ com negation }}
     | prop /\ prop' :: :: and
       {{ com conjunction }}
     | prop \/ prop' :: :: or
       {{ com disjunction }}
     | prop -> prop' :: :: imp
       {{ com implication }}
     | _|_ :: :: cont
       {{ com contradiction }}
     | ( prop ) :: S :: parentheses
       {{ tex ([[prop]]) }}
       {{ coq ([[prop]]) }}
       {{ hol ([[prop]]) }}

proplist {{ tex \overline{\phi} }} :: proplist_ ::=	
        {{ coq-universe Type }}
        {{ coq list prop }}
	{{ hol prop list }}
	{{ com list of propositions }}
	| prop1 , .. , propn :: M :: list
          {{ coq [[prop1 .. propn]] }}
	  {{ hol [[prop1 .. propn]] }}

entry :: entry_ ::=
      {{ coq-universe Type }}
      {{ com proof entry }}
      | derivation :: :: derivation
        {{ com line }}
      | [ entry1 .. entryn ] :: :: box
        {{ com box }}
      | [ proof ] :: M :: entry_box
        {{ coq (entry_box [[proof]]) }}
	{{ hol (entry_box [[proof]]) }}
      | invalid :: :: invalid
      | last ( proof ) :: M :: last
        {{ com last entry in proof }}
	{{ coq (last ([[proof]]) entry_invalid) }}
	{{ hol (LAST_DEFAULT ([[proof]]) entry_invalid) }}

proof {{ tex \rho }} :: proof_ ::=
      {{ coq-universe Type }}
      {{ coq list entry }}
      {{ hol entry list }}
      {{ com proof }}
      | () :: M :: empty
        {{ coq [] }}
        {{ hol [] }}
      | entry proof :: M :: entry
        {{ coq ([[entry]] :: [[proof]]) }}
        {{ hol ([[entry]] :: [[proof]]) }}

derivation :: derivation_ ::=
           {{ coq-universe Type }}
	   {{ com derivation in proof }}
	   | l prop reason :: :: deriv
	     {{ tex [[l]]\; [[prop]]\;\; [[reason]] }}

reason :: reason_ ::=
       {{ coq-universe Type }}
       | assumption :: :: assumption
       | justification :: :: justification

justification :: justification_ ::=
     {{ coq-universe Type }}
     {{ com derivation justification }}
    | premise :: :: premise
      {{ com premise }}
    | lem :: :: lem
      {{ com law of excluded middle }}
    | copy l :: :: copy
      {{ com copying }}
    | /\i l , l' :: :: andi
      {{ com conjunction introduction }}
    | /\e1 l :: :: ande1
      {{ com conjunction elimination }}
    | /\e2 l :: :: ande2
      {{ com conjunction elimination }}
    | \/i1 l :: :: ori1
      {{ com disjunction introduction }}
    | \/i2 l :: :: ori2
      {{ com disjunction introduction }}
    | ->e l , l' :: :: impe
      {{ com implication elimination }}
    | ~e l , l' :: :: nege
      {{ com negation elimination }}
    | _|_e l :: :: conte
      {{ com contradiction elimination }}
    | ~~i l :: :: negnegi
      {{ com double negation introduction }}
    | ~~e l :: :: negnege
      {{ com double negation elimination }}
    | mt l , l' :: :: mt
      {{ com modus tollens }}
    | ->i l - l' :: :: impi
      {{ com implication introduction }}
    | ~i l - l' :: :: negi
      {{ com negation introduction }}
    | \/e l1 , l2 - l3 , l4 - l5 :: :: ore
      {{ com disjunction elimination }} 
    | pbc l - l' :: :: pbc
      {{ com proof by contraduction }}

terminals :: terminals_ ::=
	  | premise :: :: premise {{ tex \mathrm{premise} }}
     	  | lem :: :: lem {{ tex \mathrm{LEM} }}
	  | copy :: :: copy {{ tex \mathrm{copy} }}
	  | /\i :: :: andi {{ tex \land i\, }}
	  | /\e1 :: :: ande1 {{ tex \land e_1\, }}
	  | /\e2 :: :: ande2 {{ tex \land e_2\, }}
	  | \/i1 :: :: ori1 {{ tex \lor i_1\, }}
	  | \/i2 :: :: ori2 {{ tex \lor i_2\, }}
	  | ->e :: :: impe {{ tex \rightarrow\!\!e\, }}
	  | ~e :: :: nege {{ tex \lnot e\, }}
	  | _|_e :: :: conte {{ tex \bot e\, }}
	  | ~~i :: :: negnegi {{ tex \lnot\lnot i\, }}
	  | ~~e :: :: negnege {{ tex \lnot\lnot e\, }}
     	  | mt :: :: mt {{ tex \mathrm{MT} }}
	  | ->i :: :: impi {{ tex \rightarrow\!\!i\, }}
	  | ~i :: :: negi {{ tex \lnot i\, }}
	  | \/e :: :: ore {{ tex \lor\!e\, }}
     	  | pbc :: :: pbc {{ tex \mathrm{PBC} }}
     	  | assumption :: :: assumption {{ tex \mathrm{assumption} }}
	  | |- :: :: vdash {{ tex \vdash }}
  	  | ~  :: :: neg {{ tex \lnot }}
	  | /\  :: :: and {{ tex \land }}
	  | \/ :: :: or {{ tex \lor }}
	  | -> :: :: imp {{ tex \rightarrow }}
	  | _|_ :: :: cont {{ tex \bot }}
	  | in :: :: in {{ tex \in }}
	  | |-> :: :: mapsto {{ tex \mapsto }}
	  | last :: :: last {{ tex \mathrm{last} }}
	  | invalid :: :: invalid {{ tex \mathrm{invalid} }}

dyadicprop :: dyadicprop_ ::=
        {{ coq-universe Type }}
	{{ coq (@dyadic prop) }}
	{{ hol (prop + (prop # prop)) }}
	| prop :: M :: prop
	  {{ coq (inl [[prop]]) }}
	  {{ hol (INL [[prop]]) }}
	| ( prop , prop' ) :: M :: dyad
	  {{ coq (inr ([[prop]], [[prop']])) }}
	  {{ hol (INR ([[prop]], [[prop']])) }}

G {{ tex \Gamma }} :: G_ ::=
  {{ com admissible context }}
  {{ coq Map.t dyadicprop }}
  {{ coq-universe Type }}
  {{ hol ((num + (num # num)) |-> (prop + (prop # prop))) }}
  | [] :: M :: empty
    {{ coq (Map.empty dyadicprop) }}
    {{ hol FEMPTY }}
  | G [ l |-> prop ] :: M :: add_prop
    {{ coq (Map.add (inl [[l]]) (inl [[prop]]) [[G]]) }}
    {{ hol (FUPDATE [[G]] (INL [[l]], INL [[prop]])) }}
  | G [ ( l , l' ) |-> ( prop , prop' ) ] :: M :: add_dyad
    {{ coq (Map.add (inr ([[l]], [[l']])) (inr ([[prop]], [[prop']])) [[G]]) }}
    {{ hol (FUPDATE [[G]] (INR ([[l]], [[l']]), INR ([[prop]], [[prop']]))) }}

formula :: formula_ ::=  
	{{ com formulas }}
	| judgement :: :: judgement
	  {{ com judgement }}
        | prop in proplist :: M :: prop_in_proplist
	  {{ com proposition in set of premises }}
	  {{ coq (In [[prop]] [[proplist]]) }}
	  {{ hol (MEM [[prop]] [[proplist]]) }}
     	| G ( l ) = prop :: M :: G_label
          {{ com map label to prop }}
	  {{ coq (Map.find (inl [[l]]) [[G]] = Some (inl [[prop]])) }}
	  {{ hol (FLOOKUP [[G]] (INL [[l]]) = SOME (INL [[prop]])) }}
	| G ( l , l' ) = ( prop , prop' ) :: M :: G_tuple
	  {{ com map tuple of labels to tuple of props }}
	  {{ coq (Map.find (inr ([[l]], [[l']])) [[G]] = Some (inr ([[prop]], [[prop']]))) }}
	  {{ hol (FLOOKUP [[G]] (INR ([[l]], [[l']])) = SOME (INR ([[prop]], [[prop']]))) }}
	| entry = entry' :: M :: entry_eq
	  {{ com entry equality }}
	  {{ coq [[entry]] = [[entry']] }}
	  {{ hol [[entry]] = [[entry']] }}
embed
{{ hol
Definition LAST_DEFAULT:
 (LAST_DEFAULT [] default = default) /\
 (LAST_DEFAULT (e::el) default = LAST (e::el))
End
}}
defns
  validity :: '' ::=
defn 
  claim :: :: valid_claim :: vc_ {{ com valid claim }} by

  last ( proof ) = l prop justification
  [] , proplist |- proof
  ------------------------------------- :: claim
  proplist |- prop proof
defn
  G , proplist |- proof :: :: valid_proof :: vp_ {{ com valid proof }} by
  
  ------------------ :: empty
  G , proplist |- ()

  :valid_derivation: G , proplist |- l prop justification
  G [ l |-> prop ] , proplist |- proof
  ------------------------------------------------------- :: derivation
  G , proplist |- l prop justification proof

  last ( l prop assumption proof ) = l' prop' reason
  G [ l |-> prop ] , proplist |- proof
  G [ ( l , l' ) |-> ( prop , prop' ) ] , proplist |- proof'
  ---------------------------------------------------------- :: box
  G , proplist |- [ l prop assumption proof ] proof'
defn
  G , proplist |- derivation :: :: valid_derivation :: vd_
    	      {{ com valid derivation }} by

  prop in proplist
  ------------------------------ :: premise
  G , proplist |- l prop premise

  ------------------------------------ :: lem
  G , proplist |- l prop \/ ~ prop lem

  G ( l' ) = prop
  ------------------------------ :: copy
  G , proplist |- l prop copy l'

  G ( l' ) = _|_
  ------------------------------ :: conte
  G , proplist |- l prop _|_e l'

  G ( l1 ) = prop
  G ( l2 ) = prop'
  ------------------------------------------- :: andi
  G , proplist |- l prop /\ prop' /\i l1 , l2

  G ( l' ) = prop /\ prop'
  ------------------------------ :: ande1
  G , proplist |- l prop /\e1 l'

  G ( l' ) = prop /\ prop'
  ------------------------------- :: ande2
  G , proplist |- l prop' /\e2 l'

  G ( l' ) = prop
  --------------------------------------- :: ori1
  G , proplist |- l prop \/ prop' \/i1 l'

  G ( l' ) = prop'
  --------------------------------------- :: ori2
  G , proplist |- l prop \/ prop' \/i2 l'

  G ( l1 ) = prop'
  G ( l2 ) = prop' -> prop
  ---------------------------------- :: impe
  G , proplist |- l prop ->e l1 , l2

  G ( l' ) = prop
  --------------------------------- :: negnegi
  G , proplist |- l ~ ~ prop ~~i l'

  G ( l' ) = ~ ~ prop
  ----------------------------- :: negnege
  G , proplist |- l prop ~~e l'

  G ( l1 ) = prop -> prop'
  G ( l2 ) = ~ prop'
  ----------------------------------- :: mt
  G , proplist |- l ~ prop mt l1 , l2

  G ( l1 ) = prop
  G ( l2 ) = ~ prop
  -------------------------------- :: nege
  G , proplist |- l _|_ ~e l1 , l2

  G ( l1 , l2 ) = ( prop , prop' ) 
  ------------------------------------------- :: impi
  G , proplist |- l prop -> prop' ->i l1 - l2

  G ( l1 , l2 ) = ( prop , _|_ )
  ----------------------------------- :: negi
  G , proplist |- l ~ prop ~i l1 - l2

  G ( l1 ) = prop \/ prop'
  G ( l2 , l3 ) = ( prop , prop'' )
  G ( l4 , l5 ) = ( prop' , prop'' )
  --------------------------------------------------- :: ore
  G , proplist |- l prop'' \/e l1 , l2 - l3 , l4 - l5

  G ( l1 , l2 ) = ( ~ prop , _|_ )
  ---------------------------------- :: pbc
  G , proplist |- l prop pbc l1 - l2
embed
{{ coq
End FitchProp.
End Fitch.
}}
